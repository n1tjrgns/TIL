http://maven.springframework.org/release/   spring libs
http://commons.apache.org/proper/commons-logging/download_logging.cgi        logging libs


<spring> // 간략화,정형화(bean객체) -> 유지보수에 좋음 

-DI(Dependency Injection : 의존성 주입)
-> 목적 : 의존성 낮추기.   // 의존성 : 클래스 파일을 얼마만큼 건드려서, 프로그램을 수정하느냐.
-> bean 객체 => 클래스를 new로 생성하지 않고 , xml로 설정을 해주면 설정된 대로 spring 컨테이너가 객체를 생성.
-> bean 객체 설정
	=> <bean> 태그 설정 -> spring에서 제공하는 class /  어노테이션 설정 -> 직접 만든 class

*maven
 => 라이브러리 다운로드와 등록을 자동으로 해줌
 => 메이븐 프로젝트 설정파일
      pom.xml 파일
 => 메이븐 의존설정 <dependencies> // maven repository  =>  C:\Users\hil00\.m2
  pom.xml 파일은 Project Object Model 정보를 담고 있는 파일로써, 
  이 파일에서 다루는 주요 설정 정보는 다음과 같다.
  => 프로젝트 정보
    프로젝트의 이름, 개발자 목록, 라이센스 등의 정보를 기술
  => 빌드 설정
    소스, 리소스, 라이프 사이클 별 실행할 플러그인 등 빌드와 관련된 설정을 기술
  => 빌드 환경
    사용자 환경 별로 달라질 수 있는 프로파일 정보를 기술
  => POM 연관 정보
    의존 프로젝트(모듈), 상위 프로젝트, 포함하고 있는 하위 모듈 등을 기술
  =>  의존 라이브러리 설정
    프로젝트에 필요한 라이브러리를 Maven 저장소에서 다운로드하여,
    프로젝트에 등록할 수 있도록 설정
    메이븐 같은 경우 위와 같은 개념의 의존 라이브러리들을 자동으로 프로젝트에 
    포함시켜주는 기능을 갖고 있다.

*Java Beans class : 여러개 변수를 묶어서 관리 하는것. / 자바빈즈 규약대로 만들어진 클래스
	=> 규약 : 멤버변수는 private, 기본멤버함수는 public , 변수마다 반드시 getter와 setter를 하나씩가지고 있어야함.
		반드시 매개변수 없는 생성자가 있어야함.
	=>특징 : 일반적으로 클래스명VO(Value Object) 또는 클래스명DTO(Data Transfer Object)

Namespace 가장큰 블록단위. 

*oracle 설정
-ojdbc6 추가
C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib

*bean 객체 생성 어노테이션
- @Component	: 일반적인 클래스
- @Repository	: 데이터 처리 클래스
- @Service	: 서비스 처리 클래스
- @Controller	: 객체 생성 기능 + Controller 인터페이스 역할



-spring jdbc 설정
	spring-jdbc 4.3.6
	commons-dbcp 1.4
	->dataSource ( driverClassName, url, name, password)

-mybatis 설정
	mybatis 3.4.6
	mybatis-spring 1.3.0

mybatis는 순수 xml파일로 만들어야함.

Apachi -> 웹서버 // Tomcat ->웹 컨테이너
Browser -> HTML문서 번역기 // html이 아니면 저장함.
1. ~.html -> 웹서버가 줌
2. ~.jsp , ~ -> 웹서버가 웹컨테이너한테 요청 -> 찾아서 코드로 만든뒤 웹서버한테 줌 -> 웹서버가 클라이언트한테 응답


* 스프링 웹 프로젝트에서 폴더 설정
=> mvc-config.xml에서 설정 -> 웹에 관련된 설정 파일 xml파일을 못읽음. <mvc:resources>

* EL / JSTL -> jsp 에서 제공.
 => HTML문서에서 자바코드를 없애주는 역할
 => 연산자, 제어문을 태그로서 처리
 => EL : jsp에서 표현식을 대체 (표현식 : <% = data %>)
 => JSTL : jsp에서 제어문을 대체 (if, for)

-웹
- model1 
	jsp => data 처리 + view 처리
- model2 (MVC)
	java => data처리 => model
	jsp => view처리 => view
 	서블릿 => controller
(1) if-else 방식
  => data 처리 코드를 서블릿에서 직접 처리
(2) Map 클래스 방식
  => data 처리 코드를 자바 파일로 분리.
- spring MVC
-파일업로드

*AOP(Aspect Oriented Programming : 관점 지향 프로그래밍)

MethodInterceptor
- org.aopaliance.intercept.MethodInterceptor ->interface
- 대상 객체 메서드 실행 전, 실행 후, 실행 중 Exception 발생 시 공통기능 정의
- MethodInterceptor에 정의된 invoke(0메서드
- invoke() 메서드에 대상 객체 메서드가 호출되기 전/후에 실행될 코드를 작성한다.
 => invoke() 메서드내에서 대상 객체 메서드를 호출해주어야 함.
- invocation.proceed() 메서드를 통해 대상 객체 메서드 호출
 => 이 메소드를 호출하지 않을 경우, 실행되어야할 대상 객체 메서드가 호출되지 않음. 

*aop 라이브러리
-aspectj, weaver라이브러리
1. aspectjrt 1.5.4
2. aspectjweaver 1.7.4

*aop 어노테이션
-Aspect 어노테이션을 이용하여 Aspect 클래스에 직접 Advice와 Pointcut등을 설정한다.
 -<aop:aspectj-autoproxy/>를 추가
 -Aspect class를 <bean>으로 등록

Aspect
Before(pointcut)
afterReturning
afterThrwoing
After
Around
